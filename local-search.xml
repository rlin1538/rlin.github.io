<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>《Rick and Morty》 S7E4</title>
    <link href="/2023/11/12/rick-and-morty-s7e4/"/>
    <url>/2023/11/12/rick-and-morty-s7e4/</url>
    
    <content type="html"><![CDATA[<h1 id="Live-Forver"><a href="#Live-Forver" class="headerlink" title="Live Forver"></a>Live Forver</h1><p>瑞克和莫蒂第七季最近开播了，我也每周都追最新一集，说实话前两集有点无聊，第三集开始有点意思，瑞克根废柴老爸对换一半灵魂，然后俩人惺惺相惜。不过第4集属实让我觉得那个瑞克和莫蒂又回来了。</p><p>开幕的字幕就感觉这集不对劲<img src="/2023/11/12/rick-and-morty-s7e4/2023-11-12-22-29-57.png"></p><p>但一开头就是很奇怪的一家人和和睦睦地在吃意大利面，这一幕真的很难在瑞克和莫蒂中见到，每次餐桌上都是在斗嘴，就连莫蒂他爸都不惹人讨厌了。<br><img src="/2023/11/12/rick-and-morty-s7e4/2023-11-12-22-25-54.png"></p><p>下一幕果然反转，外公的意大利面是别人的尸体。。。。确切来说是自杀的人的尸体。后面剧情就是非常直接的寓意，瑞克带莫蒂去了那个自杀就会变成意大利面的星球，然后给星球的总统带来了灵感。逼迫居民自杀，然后制作意大利面外售。不用说也知道在骂一些资本家了吧。莫蒂以为自己干了好事，确实是干了好事，一家人知道真相后：<img src="/2023/11/12/rick-and-morty-s7e4/2023-11-12-22-34-18.png"></p><p>笑死哈哈哈哈哈哈哈，大家在良心和美食之间跳跃。</p><p>后续就是瑞克带莫蒂去擦屁股，为了避免自杀，外公做生物灰色实验，研究出一种量产方案（方案二外公贴心的没有做哈哈哈哈哈哈，因为他知道莫蒂无法接受创造一个从出生就活在痛苦的生物）</p><p>没想到引来两方势力的起义：反意大利面变味派、躯干命贵派<img src="/2023/11/12/rick-and-morty-s7e4/2023-11-12-22-38-26.png"></p><p>结果就是又变成一团乱。最后找到了星球上最后一个愿意自杀的人——弗莱德，想让外公复制出原生的意大利面。然后就是本季最佳片段，弗莱德坐在安乐死椅上，注射下药物，然后回忆普通而存在你我之间的一生，伴着Live Forever的插曲，回光返照此生。<img src="/2023/11/12/rick-and-morty-s7e4/2023-11-12-22-47-49.png">音乐结束，弗莱德死了，大家看完纷纷吐了。</p><p>瑞克开始跟莫蒂讲道理<img src="/2023/11/12/rick-and-morty-s7e4/2023-11-12-22-48-23.png"></p><p>“我根本就不在乎”，生命本身就是错的，我们不需要知道太多。瑞克认识到了人生的虚无，所以他不在乎那些，依旧敢吃意面。接着就是一家人的疯狂星期四从意面变成了巨好吃的牛排，也没有人想知道牛排怎么来的了。</p><p>这集有太多深刻的内容了，讽刺资本、讽刺资本的意面工厂，还有弗莱德美好而平凡的一生（也是我们每个人的一生），以及外公对人生虚无的态度。</p><p>或许我们不需要知道太多，不用什么都计较，只是好好享受，好好度过这平凡的一生。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=2096553555&auto=1&height=66"></iframe><blockquote><p>Maybe I just want to fly</p><p>也许 我只想飞离</p><p>Want to live, I don’t want to die</p><p>我只是想活下去 , 我不想死去</p><p>Maybe I just want to breathe</p><p>也许 我只是想呼吸</p><p>Maybe I just don’t believe</p><p>也许 我只是无法再次相信</p><p>Maybe you’re the same as me</p><p>也许你如我一样</p><p>We see things I’ll never see</p><p>我们看见了无法触及到的事物</p><p>You and I are gonna live forever</p><p>你和我将永远互相交织</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>读后感</tag>
      
      <tag>影视</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【BEV】BEVFusion——基于BEV表征的多任务多传感器融合</title>
    <link href="/2023/11/09/bevfusion/"/>
    <url>/2023/11/09/bevfusion/</url>
    
    <content type="html"><![CDATA[<h1 id="论文"><a href="#论文" class="headerlink" title="论文"></a>论文</h1><p>论文的题目是：*<a href="https://arxiv.org/pdf/2205.13542.pdf">《BEVFusion: Multi-Task Multi-Sensor Fusion with Unified Bird’s-Eye View Representation》</a>*</p><p>本文提出的BEVFusion是一种多任务多传感器融合框架，其统一BEV表征空间中的多模态特征，很好地保留了几何和语义信息。为实现这一点，优化BEV池化，诊断并解除视图转换中的关键效率瓶颈，将延迟减少了40倍。BEVFusion从根本上来说是任务无关的，无缝支持不同的3D感知任务，几乎没有架构的更改。</p><p>如图所示是BEVFusion流水线概览：给定不同的感知输入，首先应用特定于模态的编码器来提取其特征；将多模态特征转换为一个统一的BEV表征，其同时保留几何和语义信息；存在的视图转换效率瓶颈，可以通过预计算和间歇降低来加速BEV池化过程；然后，将基于卷积的BEV编码器应用到统一的BEV特征中，以缓解不同特征之间的局部偏准；最后，添加一些特定任务头支持不同的3D场景理解工作。<img src="/2023/11/09/bevfusion/2023-11-09-16-08-44.png"></p><p>本文的关键贡献在于，优化了BEV池化操作的效率。</p><ul><li>预计算</li><li>间歇降低<br><img src="/2023/11/09/bevfusion/2023-11-09-16-36-23.png"></li></ul><p>通过以上优化，使得摄像头到BEV的转换速度提高了40倍！</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p><a href="https://github.com/mit-han-lab/bevfusion">https://github.com/mit-han-lab/bevfusion</a></p><hr><blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://zhuanlan.zhihu.com/p/521821929">https://zhuanlan.zhihu.com/p/521821929</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>BEV</tag>
      
      <tag>复现记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《一九八四》小记</title>
    <link href="/2023/11/07/1984/"/>
    <url>/2023/11/07/1984/</url>
    
    <content type="html"><![CDATA[<h1 id="一九八四——乔治·奥威尔著"><a href="#一九八四——乔治·奥威尔著" class="headerlink" title="一九八四——乔治·奥威尔著"></a>一九八四——乔治·奥威尔著</h1><p>在看完村上春树的《1Q84》之后，感触颇多，想写点东西记录一下，因此一时兴起建了博客，这就是本站的来历（文艺青年bushi）。首页的slogan就是源自1Q84，过多的不在此介绍，后续会补上1Q84的读后感。</p><p>而1Q84的灵感来源正是乔治奥威尔的《1984》，据说村上先取了同名的标题，想要致敬奥威尔，然后才改成1Q84，接着才开始想要写些什么。毫无疑问，两部小说中有着许多相同的主旨,最明显的就是<code>反乌托邦</code>。</p><p>本部小说出版于1949年，而故事发生在1984年，可以说包含一定的科幻元素🤔，最显著的就是文中反复提到的“电幕”。很明显，1949年没有这东西吧，这东西就是一个大块落地屏幕，不过还能监控你。本书是反乌托邦小说，有许多政治隐喻，结合时代背景，很容易看出作者批斗的是斯大林的体制，探讨政府权力过度伸张、极权主义和实施压抑性统治的后果。文中的老大哥，不用说也知道就是最大号人物吧。</p><p>我的读书小记可能有点记流水账，不过主要就是想写点东西记录读书内容和感受😋，写给自己看的就不讲究啥啦。</p><h2 id="第一部-·-老大哥正在看着你"><a href="#第一部-·-老大哥正在看着你" class="headerlink" title="第一部 · 老大哥正在看着你"></a>第一部 · 老大哥正在看着你</h2><p>本部分主要介绍故事背景，以及主人公温斯顿·史密斯的现状。</p><p>故事发生在大洋国（三个洲际超级大国之一），二战后世界分成了三个国家联盟，而本文发生在大洋国的伦敦省。</p><p>温斯顿是外围党的成员，在孤儿院长大，被党培养长大。这里介绍一下大洋国的社会阶级：<img src="/2023/11/07/1984/2023-11-07-23-10-22.png"></p><p>核心党员、外围党员和群众。</p><p>政府由四个部分来控制群众</p><ul><li>和平部：负责战争（一点也不和平</li><li>富裕部：负责经济事务（一点也不富裕，实际上定量配给，群众饿死</li><li>友爱部：负责法律和秩序（一点也不友爱，酷刑+洗脑</li><li>真理部：负责宣传（一点也不真理，篡改部</li></ul><p>温斯顿在真理部工作，负责的就是改写文献历史，使其“符合正统”（岁月的史书是吧）。然后他住的地方，在小说一开始时就描写到了，到处都有老大哥的画像，然后画像下方标题写着一句著名的话：“老大哥正在看着你”<img src="/2023/11/07/1984/2023-11-07-22-43-38.png"></p><p>然后还有三条贯穿全文的标语：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">战争即和平<br>自幼即奴役<br>无知即力量<br></code></pre></td></tr></table></figure><p>温斯顿的生活只能说凑合能过，一间一居室的公寓，日常黑面包和人工合成饭菜，还有备受吐槽的胜利牌杜松子酒。主角表面上兢兢业业，背地里坏心思可多，比如他居然写日记。。。。正经人谁写日记啊！（bushu）问题是在日记里，温斯顿写了不少他对党对老大哥的负面看法，要是被思想警察逮到，直接gg。他在日记里写道：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">思想罪不会导致死亡；思想罪本身<span class="hljs-string">&quot;&quot;</span>就是<span class="hljs-string">&quot;死亡。</span><br></code></pre></td></tr></table></figure><p>所以他写日记是偷偷地，背着电幕写。</p><p>回到他的工作，改写历史。就是将过去的记录修改为目前符合党的官方版本，好让群众觉得大洋国政府多牛掰。他充分发挥聪明才智，重写历史、捏造人物、伪造照片，然后将原始记录丢进忘怀洞，彻底从这个世界上抹除。温斯顿还挺享受动脑筋解决问题的过程，但这也让他想热切了解过去那个世界。</p><p>因此他跟踪了一个老头，想从他嘴里套出点过去的事，但老头不上当，啥也没问出来。</p><p>他还着迷一些老物件，比如写日记的日记本就是去古董店淘的，后面还去淘了一块珊瑚鹅卵石，原因是这不是这个时代可能有的东西。回家路上，他碰到了小说司的那个女孩，认为她在跟踪他，然后溜回家了。趟家里胡思乱想，怕下一秒就被思想警察冲进门逮捕。</p>]]></content>
    
    
    
    <tags>
      
      <tag>文学</tag>
      
      <tag>读后感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【BEV】伪雷达点云—Pseudo-LiDAR</title>
    <link href="/2023/10/30/pseudo-LiDAR/"/>
    <url>/2023/10/30/pseudo-LiDAR/</url>
    
    <content type="html"><![CDATA[<h1 id="论文"><a href="#论文" class="headerlink" title="论文"></a>论文</h1><p>论文的题目是：<em>《<a href="https://arxiv.org/abs/1812.07179">Pseudo-LiDAR from Visual Depth Estimation: Bridging the Gap in 3D Object Detection for Autonomous Driving》</a></em></p><p>论文探讨了基于图像的3D感知和基于LiDAR的3D感知之间的差异，指出基于图像方法的不足，提出了Pseudo-LiDAR来从图像建立点云数据进行感知任务。</p><h3 id="Image-based-3D-Perception-劣势原因"><a href="#Image-based-3D-Perception-劣势原因" class="headerlink" title="Image-based 3D Perception 劣势原因"></a>Image-based 3D Perception 劣势原因</h3><ul><li><p>不准确的深度信息</p></li><li><p>图像2D的表示方式</p></li></ul><p>后者是造成2维卷积在基于图像的感知任务中使图像扭曲的原因。作者分析了两个主要问题：一是不同物体间应该不连贯，但2D图像中不同深度的物体均在一个平面上（不像点云那种，不同深度不连贯）；二是前后景不同尺度，2D图像远处物体由于透视原因尺度较小，检测成为一个较难的问题（雷达点云则能保持三维空间中原始的尺度）。</p><h3 id="Pseudo-LiDAR-流程"><a href="#Pseudo-LiDAR-流程" class="headerlink" title="Pseudo-LiDAR 流程"></a>Pseudo-LiDAR 流程</h3><p><img src="/2023/10/30/pseudo-LiDAR/2023-10-30-16-00-41.png"></p><p>其首先利用图像深度预测模型（如DRON、PSMNET）从单目或立体图像获取对应深度图像；然后将原图像和深度信息结合得到伪雷达点云，将像素反投影到3D坐标中，得到点云；最后用伪点云代替原始雷达点云，在基于点云的感知模型中进行感知任务（如F-PointNet、AVOD）。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p><a href="https://github.com/mileyan/pseudo_lidar">https://github.com/mileyan/pseudo_lidar</a></p><blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/weixin_41965898/article/details/119953338">https://blog.csdn.net/weixin_41965898/article/details/119953338</a><br><a href="https://zhuanlan.zhihu.com/p/52803631">https://zhuanlan.zhihu.com/p/52803631</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>BEV</tag>
      
      <tag>激光雷达</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flutter踩坑报告</title>
    <link href="/2023/10/25/draw/"/>
    <url>/2023/10/25/draw/</url>
    
    <content type="html"><![CDATA[<h1 id="Flutter-踩坑总集"><a href="#Flutter-踩坑总集" class="headerlink" title="Flutter 踩坑总集"></a>Flutter 踩坑总集</h1><h3 id="卡在assembleDebug"><a href="#卡在assembleDebug" class="headerlink" title="卡在assembleDebug"></a>卡在assembleDebug</h3><p>卡在 Running Gradle task ‘assembleDebug’… 这个步骤。而且会报网络的 Exception。</p><p>可以尝试改flutter和项目的gradle源地址到国内镜像，可能没啥用</p><p>也可以手动安装。首先在 android&#x2F;gradle&#x2F;wrapper&#x2F;gradle-wrapper.properties 可以看到本项目使用的 Gradle 版本。在 Gradle 的官网（<a href="https://gradle.org/%EF%BC%89%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%B8%8B%E8%BD%BD%E5%88%B0%E5%AE%8C%E6%95%B4%E7%9A%84%E5%8C%85%E3%80%82">https://gradle.org/）就可以下载到完整的包。</a></p><p>在 <a href="https://services.gradle.org/distributions/">https://services.gradle.org/distributions/</a> 下载对应版本的包，如 gradle-5.6.2-all.zip。</p><p>下载完成之后解压到 ～&#x2F;.gradle&#x2F;wrapper&#x2F;dists&#x2F;gradle-5.6.2-all&#x2F;xxx 下。其中 xxx 为一串如 9st6wgf78h16so49nn74lgtbb 的字符串。</p><hr><h3 id="Google-font版本太低"><a href="#Google-font版本太低" class="headerlink" title="Google font版本太低"></a>Google font版本太低</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">import &#x27;asset_manifest.dart&#x27;;</span><br><span class="hljs-section">^^^^^^^^^^^^^</span><br></code></pre></td></tr></table></figure><p>Google font版本太低<br><a href="https://dev.to/curtlycritchlow/how-to-fix-assetmanifest-is-imported-from-both-packageflutter-and-packagegooglefonts-error-28e8">https://dev.to/curtlycritchlow/how-to-fix-assetmanifest-is-imported-from-both-packageflutter-and-packagegooglefonts-error-28e8</a></p><hr><h3 id="Execution-failed-for-task-‘-app-lintVitalRelease’"><a href="#Execution-failed-for-task-‘-app-lintVitalRelease’" class="headerlink" title="Execution failed for task ‘:app:lintVitalRelease’."></a>Execution failed for task ‘:app:lintVitalRelease’.</h3><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">Flutter <span class="hljs-literal">Error</span> : Could <span class="hljs-keyword">not</span> resolve <span class="hljs-keyword">all</span> artifacts <span class="hljs-keyword">for</span> <span class="hljs-keyword">configuration</span> ‘:image_picker_android:debugUnitTestRuntimeClasspath’<br></code></pre></td></tr></table></figure><p><a href="https://flutter-developer.medium.com/solved-flutter-error-could-not-resolve-all-artifacts-for-configuration-56deea1c5d12">https://flutter-developer.medium.com/solved-flutter-error-could-not-resolve-all-artifacts-for-configuration-56deea1c5d12</a></p><p>解决方案似乎是忽略掉某些错误🤔</p><hr><h3 id="Android-12-app安装错误"><a href="#Android-12-app安装错误" class="headerlink" title="Android 12 app安装错误"></a>Android 12 app安装错误</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Targeting S+ (<span class="hljs-built_in">version</span> <span class="hljs-number">31</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">above</span>) requires <span class="hljs-keyword">that</span> an explicit value <span class="hljs-keyword">for</span> android:exported be defined when intent filters are present<br></code></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/70333565/targeting-s-version-31-and-above-requires-that-an-explicit-value-for-android">https://stackoverflow.com/questions/70333565/targeting-s-version-31-and-above-requires-that-an-explicit-value-for-android</a></p><hr><h3 id="签名与流水线CI-CD"><a href="#签名与流水线CI-CD" class="headerlink" title="签名与流水线CI&#x2F;CD"></a>签名与流水线CI&#x2F;CD</h3><p><a href="https://52smile.vip/2023/08/03/CI-CD/index.html">https://52smile.vip/2023/08/03/CI-CD/index.html</a></p><p><a href="https://coldstone.fun/post/2020/02/26/flutter-github-actions/">https://coldstone.fun/post/2020/02/26/flutter-github-actions/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>flutter</tag>
      
      <tag>bug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【BEV】BEV模型开山论文——Lift-Splat-Shoot</title>
    <link href="/2023/10/23/lss/"/>
    <url>/2023/10/23/lss/</url>
    
    <content type="html"><![CDATA[<h1 id="论文"><a href="#论文" class="headerlink" title="论文"></a>论文</h1><p>论文的题目是：<em>《<a href="https://arxiv.org/pdf/2008.05711.pdf">LSS: Lift, Splat, Shoot: Encoding Images from Arbitrary Camera Rigs by Implicitly Unprojecting》</a></em></p><p>其核心思想是通过显示估计图像的深度信息，对采集到的环视图像进行特征提取，根据估计出来的离散深度信息，实现图像特征向BEV特征的转换，进而完成自动驾驶中的语义分割任务。</p><h3 id="Lift"><a href="#Lift" class="headerlink" title="Lift"></a>Lift</h3><p>提取图像特征，然后将每个图片从二维提升到统一的三维坐标系下，得到像素点在3D空间中的特征，作者将每个像素点都生成所有可能深度，得到一组离散化的深度空间，对应一个棱台状的空间点云分布<img src="/2023/10/23/lss/2023-10-23-15-46-57.png"></p><h3 id="Splat"><a href="#Splat" class="headerlink" title="Splat"></a>Splat</h3><p>将Lift得到的点云转化成Pillars（无限高的体素），就是将点分配到离他最近的Pillars中，然后求和池化得到一个C*H*W的张量，对这个张量进行CNN可以得到鸟瞰图的预测结果<img src="/2023/10/23/lss/2023-10-23-15-54-28.png"></p><h3 id="Shoot"><a href="#Shoot" class="headerlink" title="Shoot"></a>Shoot</h3><p>对splat得到的特征进行编解码处理，可以看作是bev特征提取器，将编解码后的特征用于目标任务</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>学习链接：<a href="https://www.bilibili.com/video/BV16T411g7Gc">手撕BEV的开山之作</a></p><h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><p><a href="https://github.com/nv-tlabs/lift-splat-shoot">https://github.com/nv-tlabs/lift-splat-shoot</a></p><p>首先需要用到nuscenes数据集（<a href="https://www.nuscenes.org),下载mini的完整数据集以及map/">https://www.nuscenes.org），下载mini的完整数据集以及map</a> extension 1.3</p><p>然后下载预训练的模型： <a href="https://drive.google.com/file/d/18fy-6beTFTZx5SrYLs9Xk7cY-fGSm7kw/view?usp=sharing">https://drive.google.com/file/d/18fy-6beTFTZx5SrYLs9Xk7cY-fGSm7kw/view?usp=sharing</a></p><p>然后可以运行如下代码生成鸟瞰图：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">python main.py viz_model_preds mini --model<br>f=E:\Download\model525000.pt --dataroot=F:\Datasets\Nuscenes-mini --map_folder=F:\Datasets\Nuscenes-mini<br><br><span class="hljs-comment"># 其中--modelf为预训练模型目录，--dataroot为nuscenes数据集根目录，--map_folder为map extension根目录</span><br></code></pre></td></tr></table></figure><hr><blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/zyw2002/article/details/127906938">https://blog.csdn.net/zyw2002/article/details/127906938</a><br><a href="https://blog.csdn.net/CV_Autobot/article/details/128213478">https://blog.csdn.net/CV_Autobot/article/details/128213478</a><br><a href="https://blog.csdn.net/weixin_41803339/article/details/127140039">https://blog.csdn.net/weixin_41803339/article/details/127140039</a><br><a href="https://blog.csdn.net/weixin_42108183/article/details/128524399?spm=1001.2014.3001.5501">https://blog.csdn.net/weixin_42108183/article/details/128524399?spm=1001.2014.3001.5501</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>BEV</tag>
      
      <tag>复现记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenPCDet复现</title>
    <link href="/2023/10/16/pcdet/"/>
    <url>/2023/10/16/pcdet/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p><a href="https://www.cnblogs.com/mrneojeep/p/17390375.html">https://www.cnblogs.com/mrneojeep/p/17390375.html</a></p><p><a href="https://blog.csdn.net/qq_45228845/article/details/125583891">https://blog.csdn.net/qq_45228845/article/details/125583891</a></p><h1 id="问题集合"><a href="#问题集合" class="headerlink" title="问题集合"></a>问题集合</h1><ol><li><p>kornia问题<br><img src="/2023/10/16/pcdet/2023-10-16-19-58-11.png"></p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">ModuleNotFoundError: No <span class="hljs-keyword">module</span> <span class="hljs-keyword">named</span> ‘kornia‘<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">Cannot statically infer the expected size of a list in <span class="hljs-keyword">this</span> context<br></code></pre></td></tr></table></figure><blockquote><p>解决方案：安装正确版本的kornia<br><a href="https://blog.csdn.net/weixin_52288941/article/details/133518555">https://blog.csdn.net/weixin_52288941/article/details/133518555</a></p></blockquote></li><li><p>demo跑通了但是：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">GLFW Error: X11: The <span class="hljs-keyword">DISPLAY</span> environment <span class="hljs-keyword">variable</span> is <span class="hljs-comment">missing</span><br></code></pre></td></tr></table></figure><p>ssh远程没有Xserver客户端，显示不了可视化工具</p><blockquote><p>解决方案：配置本地可视化<br><a href="https://blog.csdn.net/m0_50181189/article/details/120958568">https://blog.csdn.net/m0_50181189/article/details/120958568</a></p></blockquote></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>复现记录</tag>
      
      <tag>目标检测</tag>
      
      <tag>点云</tag>
      
      <tag>深度学习</tag>
      
      <tag>激光雷达</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建站小记</title>
    <link href="/2023/10/13/first-post/"/>
    <url>/2023/10/13/first-post/</url>
    
    <content type="html"><![CDATA[<p>记录本博客搭建过程。</p><p>为了以后更好的记录学习过程、问题解决以及一些随笔，特建立个人博客，开始养成写博客的习惯。</p><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li><p>Node.js</p></li><li><p>Git</p></li></ul><blockquote><p>安装过程不再细讲，主要吐槽一下用宝塔面板安装node.js时各种问题：npm版本过高、命令行命令无效等。<br>所以没有必要在服务器上装，本地电脑安装后，后面有部署到GitHub Page的步骤。</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>环境安装完，直接用npm安装Hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install -g hexo-cli<br>$ hexo init ***.github.io  <span class="hljs-comment"># 这里替换成你自己的，为后续更新到github上，使用github名字.github.io</span><br>$ <span class="hljs-built_in">cd</span> ***.github.io  <span class="hljs-comment"># 进入本地的博客文件夹</span><br>$ npm install<br>$ hexo server <span class="hljs-comment"># 打开本地服务器预览</span><br></code></pre></td></tr></table></figure><p>接着安装fluid主题，官网：<a href="https://hexo.io/themes/">Fluid</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>或者选择直接去GitHub下载<a href="https://github.com/fluid-dev/hexo-theme-fluid/releases/tag/v1.9.5">release源码</a>，解压到hexo项目的themes目录下，重命名为fluid</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>修改博客目录中_config.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>  <span class="hljs-comment"># 指定中文</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <span class="hljs-comment"># 指定主题</span><br></code></pre></td></tr></table></figure><p>更多配置可以参考Hexo官方文档：<a href="https://hexo.io/zh-cn/docs/configuration">Hexo 配置</a>，以及Fluid官方文档：<a href="https://hexo.fluid-dev.com/docs/guide/">Fluid 配置指南</a>。Hexo配置是博客主目录下的_config.yml，Fluid配置是themes&#x2F;fluid目录下的_config.yml</p><h2 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h2><p>执行如下命令，可以在本地生成静态页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean  <span class="hljs-comment"># 清空一下缓存，有时候博客页面显示不正常也可以试试这个命令行</span><br>$ hexo g  <span class="hljs-comment"># hexo generate的简写，把刚刚做的改动生成更新一下</span><br>$ hexo server  <span class="hljs-comment"># 在本地服务器看看博客：https://localhost:4000</span><br></code></pre></td></tr></table></figure><p>到此你已经可以在本地看到你的博客小站啦~</p><h1 id="部署Github-Page"><a href="#部署Github-Page" class="headerlink" title="部署Github Page"></a>部署Github Page</h1><p>Github Page是提供静态网站访问服务的，就是将静态网站项目传到GitHub上，他能为你提供一个url入口（如rlin1538.github.io），直接访问你的静态网站，而Hexo编译生成的就是一个静态网站。</p><p>首先我们得把生成的静态网站上传到GitHub中，GitHub中得有一个对应的仓库。所以第一步是创建一个名为<code>GitHub用户名.github.io</code>的代码仓库<img src="/2023/10/13/first-post/001.png"></p><p>然后修改博客配置_config.yml，改成你的信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:xxxx/xxxx.github.io.git</span> <span class="hljs-comment"># xxxx是你的GitHub用户名</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>然后生成站点文件并推送到远程仓库即可，推送时需要填GitHub账户和密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean  <span class="hljs-comment"># 保险起见，每次我们都清空一下</span><br>hexo deploy --generate<br></code></pre></td></tr></table></figure><p>推送完成后，打开你的Github Page即可看到小站啦！（可能会有一分钟左右的延迟）</p><p>参考：<a href="https://hexo.io/zh-cn/docs/one-command-deployment">部署|Hexo</a></p><h1 id="创作"><a href="#创作" class="headerlink" title="创作"></a>创作</h1><p>要开始写博客，可以通过在博客目录执行如下命令创建一篇新文章：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>hexo会在source&#x2F;_posts目录下创建一个test.md文件，我们在这里使用markdown语法写博客即可</p><p>或者你可以直接在source&#x2F;_posts目录创建md文件。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">test</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-04-22 21:17:39</span><br><span class="hljs-attr">tags:</span> <span class="hljs-string">hexo</span><br><span class="hljs-attr">categories:</span> <span class="hljs-string">教程</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-comment"># 一级标题</span><br><br><span class="hljs-comment">## 二级标题</span><br><br><span class="hljs-string">这里开始我们的写作吧</span><br></code></pre></td></tr></table></figure><p>上面文件最上方以—分隔的区域，用于指定文章属性（<a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter | Hexo</a>），常用的属性就是title, date, tag, categories，分别指定文章标题、建立日期、标签和分类。其中标题和建立日期都是自动生成的，我们不用管。tag和categories一般是由我们自己设置的</p><h1 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h1><p>我们可以自己买个域名，然后把GitHub Page绑定到自己的域名下。<br>我用的域名商是<a href="https://www.namesilo.com/">NameSilo</a>，十几块就能买到一个一年的域名，你也可以选择其他，比如国内的<a href="https://wanwang.aliyun.com/">阿里万网</a></p><p>首先需要在博客项目source目录中创建一个CNAME文件，填入你的域名：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">nuaa.life<br></code></pre></td></tr></table></figure><p>接着我们进入域名服务商控制台，配置域名解析：<img src="/2023/10/13/first-post/2023-10-14-13-27-21.png"><br>目标填你的GitHub Page地址，然后在GitHub博客项目中点Settings，选择Pages，填写Custom domain为你的域名，然后你就可以通过你的个人域名访问博客小站啦</p><blockquote><p>国内的域名商一般自带的控制台服务挺好用，DNS配置方便<br>国外的可以用<a href="https://cloudflare.com/">Cloudflare</a>来配置域名解析，如何使用网上已有很多教程。</p></blockquote><p>参考文章：<a href="https://juejin.cn/post/7090201115005812767">https://juejin.cn/post/7090201115005812767</a></p><h1 id="自动部署"><a href="#自动部署" class="headerlink" title="自动部署"></a>自动部署</h1><p>到此为止，我们需要在本地去编译网站静态文件，然后上传。</p><p>为方便博客撰写以及源码备份，我们可以采用Github Action自动部署，即将本地hexo源码上传到GitHub（不是上文提到的编译后的静态网站文件），利用GitHub提供的Actions，自动流转流水线编译出静态网站文件传到rlin1538.github.io仓库中。</p><p>这样，我们只需在本地写md，然后用git提交push到GitHub中即可，十分的方便！</p><p>本站参考了这篇文章完成自动部署，友友可以参考：<a href="https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/">利用Github Actions自动部署Hexo博客</a></p><h1 id="博客拓展"><a href="#博客拓展" class="headerlink" title="博客拓展"></a>博客拓展</h1><h2 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h2><p>参考：<a href="https://www.jianshu.com/p/785d727810b3">https://www.jianshu.com/p/785d727810b3</a></p><p>或者：<a href="https://www.zywvvd.com/notes/hexo/theme/fluid/fluid-waline/fluid-waline/">https://www.zywvvd.com/notes/hexo/theme/fluid/fluid-waline/fluid-waline/</a></p><hr><blockquote><h1 id="开始享受你的博客之旅吧"><a href="#开始享受你的博客之旅吧" class="headerlink" title="开始享受你的博客之旅吧~~~"></a>开始享受你的博客之旅吧~~~</h1></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>技术总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/10/13/hello-world/"/>
    <url>/2023/10/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
