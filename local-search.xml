<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【BEV】BEVFormer——利用时空 Transformer 从多相机图像中学习鸟瞰图表示</title>
    <link href="/2024/04/16/bevformer/"/>
    <url>/2024/04/16/bevformer/</url>
    
    <content type="html"><![CDATA[<h1 id="论文"><a href="#论文" class="headerlink" title="论文"></a>论文</h1><p>论文的题目是：*<a href="https://arxiv.org/abs/2203.17270">《BEVFormer: Learning Bird’s-Eye-View Representation from Multi-Camera Images via Spatiotemporal Transformers》</a>*</p><h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><blockquote><p>官方教程：<a href="https://github.com/fundamentalvision/BEVFormer/blob/master/docs/install.md">https://github.com/fundamentalvision/BEVFormer/blob/master/docs/install.md</a></p></blockquote><ol><li>创建conda环境</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda create -n open-mmlab python=3.8 -y<br>conda activate open-mmlab<br></code></pre></td></tr></table></figure><ol start="2"><li>安装pytorch</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install torch==1.9.1+cu111 torchvision==0.10.1+cu111 torchaudio==0.9.1 -f https://download.pytorch.org/whl/torch_stable.html<br><span class="hljs-comment"># Recommended torch&gt;=1.9</span><br><br></code></pre></td></tr></table></figure><ol start="3"><li>安装gcc6</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda install -c omgarcia gcc-6 <span class="hljs-comment"># gcc-6.2</span><br></code></pre></td></tr></table></figure><ol start="4"><li>安装mmcv-full、mmdet、mmseg</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install mmcv-full==1.4.0<br><span class="hljs-comment">#  pip install mmcv-full==1.4.0 -f https://download.openmmlab.com/mmcv/dist/cu111/torch1.9.0/index.html</span><br>pip install mmdet==2.14.0<br>pip install mmsegmentation==0.14.1<br></code></pre></td></tr></table></figure><ol start="5"><li><p>安装mmdet3d</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/open-mmlab/mmdetection3d.git<br><span class="hljs-built_in">cd</span> mmdetection3d<br>git checkout v0.17.1 <span class="hljs-comment"># Other versions may not be compatible.</span><br>pip install -e .<br></code></pre></td></tr></table></figure></li><li><p>安装detectron2和Timm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install einops fvcore seaborn iopath==0.1.9 timm==0.6.13  typing-extensions==4.5.0 pylint ipython==8.12  numpy==1.19.5 matplotlib==3.5.2 numba==0.48.0 pandas==1.4.4 scikit-image==0.19.3 setuptools==59.5.0<br>python -m pip install <span class="hljs-string">&#x27;git+https://github.com/facebookresearch/detectron2.git&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>下载BEVFormer</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/fundamentalvision/BEVFormer.git<br><span class="hljs-built_in">cd</span> bevformer<br><span class="hljs-built_in">mkdir</span> ckpts<br><span class="hljs-built_in">cd</span> ckpts &amp; wget https://github.com/zhiqi-li/storage/releases/download/v1.0/r101_dcn_fcos3d_pretrain.pth<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>BEV</tag>
      
      <tag>复现记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CFM键位码第三方小工具</title>
    <link href="/2024/03/15/cfm-joy-sticks-manager/"/>
    <url>/2024/03/15/cfm-joy-sticks-manager/</url>
    
    <content type="html"><![CDATA[<h1 id="CFM键位码工具"><a href="#CFM键位码工具" class="headerlink" title="CFM键位码工具"></a>CFM键位码工具</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本软件是穿越火线：枪战王者的第三方键位码工具，支持上传本地键位、使用键位码替换本地键位、键位查看功能。</p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><h3 id="CFM键位码工具-apk"><a href="#CFM键位码工具-apk" class="headerlink" title="CFM键位码工具.apk"></a><a href="/download/CFM_Tool.apk">CFM键位码工具.apk</a></h3><h3 id="开源地址"><a href="#开源地址" class="headerlink" title="开源地址"></a>开源地址</h3><p><a href="https://github.com/rlin1538/Cfm_Joy_Manager">https://github.com/rlin1538/Cfm_Joy_Manager</a></p><h3 id="应用截图"><a href="#应用截图" class="headerlink" title="应用截图"></a>应用截图</h3><center class="half"><img src="https://github.com/rlin1538/Cfm_Joy_Manager/assets/60032065/858f00c3-000e-4ae5-a454-3bffc8cea657" width=200/><img src="https://github.com/rlin1538/Cfm_Joy_Manager/assets/60032065/109306f4-f43d-43dd-be30-8ce9c623fb68" width=200/><img src="https://github.com/rlin1538/Cfm_Joy_Manager/assets/60032065/39fd6c72-5a58-4250-82f6-e28fcd7ff7cb" width=200/></center><p><img src="https://github.com/rlin1538/Cfm_Joy_Manager/assets/60032065/3d816563-4d39-4fc8-ad35-34b9d459a360" alt="Screenshot_2024-03-18-13-17-12-158_com rlin cfm_joy_manager"></p><h2 id="CFM键位码第三方小工具开发记录"><a href="#CFM键位码第三方小工具开发记录" class="headerlink" title="CFM键位码第三方小工具开发记录"></a>CFM键位码第三方小工具开发记录</h2><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>CF手游的键位码系统官方迟迟做不出来，因此心血来潮，自己搞一个出来，如果能传播开，用的人多了，还能敦促官方尽快搞出来第一方的。</p><p>首先分析整个系统的基本需求</p><ul><li>键位修改</li><li>键位查看</li><li>云存档</li><li>键位码系统</li></ul><p>玩家原本可以用MT管理器，手动进入键位文件<code>CustomJoySticksConfig_*.json</code>修改具体键位数据，从别的地方复制过来粘贴，有许多代练代上分的玩家登录别人的好需要自己手动替换一遍，比较麻烦。而隔壁游戏和平精英，早早的就推出了官方键位码系统，和平营地还能去找热门主播的键位码来用（不愧是手游FPS头把交椅，策划比CFM优秀太多）</p><p>本工具旨在完成一个第三方的键位码系统，方便玩家更换键位。</p><p>基础场景为：用户选择本地的一个键位文件（对应的一个用户的一个键位方案），点击修改，输入键位码后，即可完成键位的一键替换。键位文件将存放在云端，需要有一个数据库存储，用户可以将本地数据上传到云端，并返回一个键位码，唯一标识其上传的这个数据。</p><p>不设置用户系统，暂无必要</p><h3 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h3><p>采用Android原生客户端+Supabase为后端的系统设计</p><p>Android采用原生安卓的Jetpack Compose库来搭建</p><p>Supabase是类似Firebase的Baas（backend as a service）服务商，对app开发者很方便，无需自己搭建后端系统。</p><h3 id="技术分析"><a href="#技术分析" class="headerlink" title="技术分析"></a>技术分析</h3><h4 id="键位查看"><a href="#键位查看" class="headerlink" title="键位查看"></a>键位查看</h4><p>分析键位文件的结构，定位用xPos和yPos来完成，其他还有透明度、大小等属性，但是不同按键的坐标原点不一样（策划这么搞一定有他的道理），共八个坐标系：左上、左中、左下、中心点、中下、右上、右中、右下。</p><p>需要按键都分类出来，然后对应到坐标系中。比较简单的方法是将键位json中的所有xPos和yPos改成0，然后能比较快速的分类。</p><p>然后剩下工作就比较简单了，用Canvas直接画就行。</p><h4 id="Android-data-权限"><a href="#Android-data-权限" class="headerlink" title="Android&#x2F;data&#x2F;* 权限"></a>Android&#x2F;data&#x2F;* 权限</h4><p>在Android11之后，谷歌加入了文件沙箱存储模式，第三方应用就不能像以前一样直接访问Android&#x2F;data目录了。</p><p>新的方法是用SAF框架来授予应用某个文件夹的权限。</p><blockquote><p>本文依据这篇博客的方案来解决权限问题：<a href="https://cloud.tencent.com/developer/article/2106318">https://cloud.tencent.com/developer/article/2106318</a></p></blockquote><h4 id="后端服务"><a href="#后端服务" class="headerlink" title="后端服务"></a>后端服务</h4><p>自己从头搭后端太麻烦了，直接用 <a href="https://supabase.com/">Supabase</a>，注册后建个项目，然后建个表就直接能用了。<br>客户端安装对应的SDK，直接调用，特别方便（关键还是免费的</p><blockquote><p>Kotlin的使用指南：<a href="https://supabase.com/docs/reference/kotlin/gt">https://supabase.com/docs/reference/kotlin/gt</a></p></blockquote><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p><img src="/2024/03/15/cfm-joy-sticks-manager/Screenshot_2024-03-15-17-35-51-262_com.rlin.cfm_j.jpg" alt="home"><br><img src="/2024/03/15/cfm-joy-sticks-manager/Screenshot_2024-03-15-17-35-55-496_com.rlin.cfm_j.jpg" alt="native"><br><img src="/2024/03/15/cfm-joy-sticks-manager/Screenshot_2024-03-15-17-35-58-254_com.rlin.cfm_j.jpg" alt="cloud"></p>]]></content>
    
    
    
    <tags>
      
      <tag>android</tag>
      
      <tag>kotlin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Livox Mid-70 入门使用</title>
    <link href="/2023/12/13/mid-70-setup/"/>
    <url>/2023/12/13/mid-70-setup/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Livox Mid-70是一款高性价比、安全可靠的激光探测测距仪传感器，可广泛应用于包括无人驾驶、工业搬运机器人、室内&#x2F;室外服务机器人、特种机器人等众多领域，例如AGV、AMR、自动叉车、医疗后勤机器人、清洁机器人、末端配送机器人、智能安防机器人等。Livox Mid-70最小探测距离为0.05m,最大探测距离可达260 m。</p><p><img src="/2023/12/13/mid-70-setup/2023-12-13-17-03-39.png"></p><h3 id="外部电源设计"><a href="#外部电源设计" class="headerlink" title="外部电源设计"></a>外部电源设计</h3><p>采用现成的18650锂电池组（某宝入手，3000毫安时的五十多块钱），带DC公头和母头。mid-70的电源线有正负极接线，安装带附送的DC母头上，插到电池组上完成供电。<img src="/2023/12/13/mid-70-setup/2023-12-19-14-23-46.png"></p><blockquote><p><a href="https://terra-1-g.djicdn.com/65c028cd298f4669a7f0e40e50ba1131/Download/Mid-70/new/Livox%20Mid-70%20User%20Manual_CHS_v1.2.pdf">Mid-70 用户手册</a></p></blockquote><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><blockquote><p>Livox官方提供了多平台（Windows和Ubuntu）的支持，为接近实际开发场景，一般选用Ubuntu18.04来搭建环境，Windows上也有Livox viewer可以方便查看激光雷达点云信息。</p></blockquote><p>为图省事，没安装双系统，尝试在win11的wsl2平台上提供的Ubuntu18.04子系统来搭建环境。</p><h2 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h2><p>参考官方提供的文档直接安装：<a href="https://learn.microsoft.com/zh-cn/windows/wsl/install">https://learn.microsoft.com/zh-cn/windows/wsl/install</a></p><p>然后到微软商城搜索Ubuntu，选择18.04的版本直接安装。</p><blockquote><p>注意wsl的版本，后续需要用到图形化界面的功能，只有wsl2能够使用。<br>ubuntu20.04 也能搭环境，但后面跑一些算法时需要额外修改一些代码。<br>一开始我用了18.04，但是GUI太卡了，点云一多，卡到爆炸，后面查了一下，18.04似乎不支持GUI显卡加速。所以改用20.04</p></blockquote><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="ROS环境"><a href="#ROS环境" class="headerlink" title="ROS环境"></a>ROS环境</h3><p>ROS（英语：Robot Operating System，一般译为机器人操作系统），是专为机器人软件开发所设计出来的一套电脑操作系统架构。</p><p>目前重点不是这个，所以不做过多介绍，ros环境是许多项目的基础环境，所以需要配置好。</p><p>这里直接用一键安装的脚本，可以非常非常方便的一键安装所需环境。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget http://fishros.com/install -O fishros &amp;&amp; . fishros<br></code></pre></td></tr></table></figure><p>一路按推荐选项即可。<br>选择的是ROS1的环境，暂时不需要ROS2。</p><p>安装完成后执行<code>roscore</code>，如没报错则完成ROS环境搭建，如提示不存在命令，则需更新一下source ROS目录下的setup.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /opt/ros/noetic/setup.sh<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source /opt/ros/noetic/setup.sh&quot;</span> &gt;&gt; ~/.bashrc<br><span class="hljs-built_in">source</span> ~/.bashrc<br><br><span class="hljs-comment">## noetic 为你的ROS版本名称</span><br></code></pre></td></tr></table></figure><blockquote></blockquote><h3 id="Livox-SKD"><a href="#Livox-SKD" class="headerlink" title="Livox-SKD"></a>Livox-SKD</h3><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><p>Livox SDK 依赖于 cmake 。你可以通过 apt 工具安装这些依赖包 :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install cmake<br></code></pre></td></tr></table></figure><h4 id="编译-Livox-SDK"><a href="#编译-Livox-SDK" class="headerlink" title="编译 Livox SDK"></a>编译 Livox SDK</h4><p>在 Livox SDK 目录中，执行以下指令编译工程:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/Livox-SDK/Livox-SDK.git<br><span class="hljs-built_in">cd</span> Livox-SDK<br><span class="hljs-built_in">cd</span> build &amp;&amp; cmake ..<br>make<br>sudo make install<br></code></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/Livox-SDK/Livox-SDK/blob/master/README_CN.md">https://github.com/Livox-SDK/Livox-SDK/blob/master/README_CN.md</a></p></blockquote><h3 id="Livox-ROS-驱动"><a href="#Livox-ROS-驱动" class="headerlink" title="Livox ROS 驱动"></a>Livox ROS 驱动</h3><ol><li><p>下载livox ros驱动程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/Livox-SDK/livox_ros_driver.git ws_livox/src<br></code></pre></td></tr></table></figure></li><li><p>构建livox ros驱动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ws_livox<br>catkin_make<br></code></pre></td></tr></table></figure></li><li><p>更新ROS包环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ./devel/setup.sh<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>到此，环境基本搭建完毕，可以使用如下命令启动Rviz连接激光雷达查看实时点云</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">roslaunch livox_ros_driver livox_lidar_rviz.<span class="hljs-built_in">launch</span><br></code></pre></td></tr></table></figure><p><a href="https://github.com/Livox-SDK/livox_ros_driver/blob/master/README_CN.md">https://github.com/Livox-SDK/livox_ros_driver/blob/master/README_CN.md</a></p></blockquote><h1 id="部分算法"><a href="#部分算法" class="headerlink" title="部分算法"></a>部分算法</h1><h2 id="Livox-mapping"><a href="#Livox-mapping" class="headerlink" title="Livox_mapping"></a>Livox_mapping</h2><p>这个是Livox官方提供的建图软件包，适用于低速运动下的mapping。</p><p><img src="/2023/12/13/mid-70-setup/mid40_hall%20(1).gif"></p><blockquote><p>按上述环境搭建后，一般可以直接构建本软件包，如有提示缺少依赖，可以按官方文档安装PCL &amp;&amp; Eigen &amp;&amp; openCV<br>openCV安装：<a href="https://blog.csdn.net/public669/article/details/99044895">https://blog.csdn.net/public669/article/details/99044895</a><br><a href="https://blog.csdn.net/qianbin3200896/article/details/107894029?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-10&spm=1001.2101.3001.4242">https://blog.csdn.net/qianbin3200896/article/details/107894029?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-10&amp;spm=1001.2101.3001.4242</a><br>推荐openCV3.4的</p></blockquote><h4 id="软件包构建"><a href="#软件包构建" class="headerlink" title="软件包构建"></a>软件包构建</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/ws_livox/src<br>git <span class="hljs-built_in">clone</span> https://github.com/Livox-SDK/livox_mapping.git<br><span class="hljs-built_in">cd</span> ..<br>catkin_make<br><span class="hljs-built_in">source</span> ~/ws_livox/devel/setup.bash<br></code></pre></td></tr></table></figure><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p>将雷达连接到电脑，依次执行如下命令（需要开两个终端）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">roslaunch livox_mapping mapping_mid.launch<br>roslaunch livox_ros_driver livox_lidar.launch<br></code></pre></td></tr></table></figure><p>随即将启动Rivz，移动激光雷达，完成建图。</p><blockquote><h5 id="温馨提示"><a href="#温馨提示" class="headerlink" title="温馨提示"></a>温馨提示</h5><p>在Ubuntu 20.04系统下运行时，可能会出现一些问题，比如<br>Error transforming odometry ‘Odometry’ from frame ‘&#x2F;camera_init’ to frame ‘camera_init’<br>这时候需要将代码里的<code>/camera_init</code>改成<code>camera_init</code><br><a href="https://www.cnblogs.com/xinzhaodc/p/16143348.html">https://www.cnblogs.com/xinzhaodc/p/16143348.html</a></p></blockquote><h2 id="Livox-detection"><a href="#Livox-detection" class="headerlink" title="Livox_detection"></a>Livox_detection</h2><p>Livox官方提供的激光点云目标检测算法，可以检测大部分车辆和行人。</p><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=896508475&bvid=BV1wA4y1D7qZ&cid=720277560&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><blockquote><p>github链接：<a href="https://github.com/Livox-SDK/livox_detection">https://github.com/Livox-SDK/livox_detection</a></p></blockquote><h4 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># python=3.8</span><br><span class="hljs-comment"># pytorch=1.8.2</span><br>conda install pytorch torchvision torchaudio cudatoolkit=11.1 -c pytorch-lts -c nvidia<br><span class="hljs-comment"># numpy=1.23.1</span><br>conda install numpy=1.23.1<br><span class="hljs-comment"># ros_numpy</span><br>sudo apt-get install ros-noetic-ros-numpy<br><span class="hljs-comment"># rospkg=1.4.0</span><br>pip install rospkg==1.4.0<br></code></pre></td></tr></table></figure><h4 id="软件包构建-1"><a href="#软件包构建-1" class="headerlink" title="软件包构建"></a>软件包构建</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/Livox-SDK/livox_detection.git<br><span class="hljs-built_in">cd</span> livox_detection<br>python3 setup.py develop<br></code></pre></td></tr></table></figure><h4 id="运行-1"><a href="#运行-1" class="headerlink" title="运行"></a>运行</h4><p>需要开四个终端</p><ol><li><p>运行roscore</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">roscore<br></code></pre></td></tr></table></figure></li><li><p>运行模型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> tools<br>python3 test_ros.py --pt ../pt/livox_model_1.pt<br></code></pre></td></tr></table></figure></li><li><p>点云发布</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">roslaunch livox_ros_driver livox_lidar.launch<br></code></pre></td></tr></table></figure></li><li><p>可视化结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rviz -d ../tools/rviz.rviz<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>激光雷达</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《一九八四》小记</title>
    <link href="/2023/12/02/1984/"/>
    <url>/2023/12/02/1984/</url>
    
    <content type="html"><![CDATA[<h1 id="一九八四——乔治·奥威尔著"><a href="#一九八四——乔治·奥威尔著" class="headerlink" title="一九八四——乔治·奥威尔著"></a>一九八四——乔治·奥威尔著</h1><p>在看完村上春树的《1Q84》之后，感触颇多，想写点东西记录一下，因此一时兴起建了博客，这就是本站的来历（文艺青年bushi）。首页的slogan就是源自1Q84，过多的不在此介绍，后续会补上1Q84的读后感。</p><p>而1Q84的灵感来源正是乔治奥威尔的《1984》，据说村上先取了同名的标题，想要致敬奥威尔，然后才改成1Q84，接着才开始想要写些什么。毫无疑问，两部小说中有着许多相同的主旨,最明显的就是<code>反乌托邦</code>。</p><p>本部小说出版于1949年，而故事发生在1984年，可以说包含一定的科幻元素🤔，最显著的就是文中反复提到的“电幕”。很明显，1949年没有这东西吧，这东西就是一个大块落地屏幕，不过还能监控你。本书是反乌托邦小说，有许多政治隐喻，结合时代背景，很容易看出作者批斗的是斯大林的体制，探讨政府权力过度伸张、极权主义和实施压抑性统治的后果。文中的老大哥，不用说也知道就是最大号人物吧。</p><p>我的读书小记可能有点记流水账，不过主要就是想写点东西记录读书内容和感受😋，写给自己看的就不讲究啥啦。</p><h2 id="第一部-·-老大哥正在看着你"><a href="#第一部-·-老大哥正在看着你" class="headerlink" title="第一部 · 老大哥正在看着你"></a>第一部 · 老大哥正在看着你</h2><p>本部分主要介绍故事背景，以及主人公温斯顿·史密斯的现状。</p><p>故事发生在大洋国（三个洲际超级大国之一），二战后世界分成了三个国家联盟，而本文发生在大洋国的伦敦省。</p><p>温斯顿是外围党的成员，在孤儿院长大，被党培养长大。这里介绍一下大洋国的社会阶级：<img src="/2023/12/02/1984/2023-11-07-23-10-22.png"></p><p>核心党员、外围党员和群众。</p><p>政府由四个部分来控制群众</p><ul><li>和平部：负责战争（一点也不和平</li><li>富裕部：负责经济事务（一点也不富裕，实际上定量配给，群众饿死</li><li>友爱部：负责法律和秩序（一点也不友爱，酷刑+洗脑</li><li>真理部：负责宣传（一点也不真理，篡改部</li></ul><p>温斯顿在真理部工作，负责的就是改写文献历史，使其“符合正统”（岁月的史书是吧）。然后他住的地方，在小说一开始时就描写到了，到处都有老大哥的画像，然后画像下方标题写着一句著名的话：“老大哥正在看着你”<img src="/2023/12/02/1984/2023-11-07-22-43-38.png"></p><p>然后还有三条贯穿全文的标语：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">战争即和平<br>自幼即奴役<br>无知即力量<br></code></pre></td></tr></table></figure><p>温斯顿的生活只能说凑合能过，一间一居室的公寓，日常黑面包和人工合成饭菜，还有备受吐槽的胜利牌杜松子酒。主角表面上兢兢业业，背地里坏心思可多，比如他居然写日记。。。。正经人谁写日记啊！（bushi）问题是在日记里，温斯顿写了不少他对党对老大哥的负面看法，要是被思想警察逮到，直接gg。他在日记里写道：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">思想罪不会导致死亡；思想罪本身<span class="hljs-string">&quot;&quot;</span>就是<span class="hljs-string">&quot;死亡。</span><br></code></pre></td></tr></table></figure><p>所以他写日记是偷偷地，背着电幕写。</p><p>回到他的工作，改写历史。就是将过去的记录修改为目前符合党的官方版本，好让群众觉得大洋国政府多牛掰。他充分发挥聪明才智，重写历史、捏造人物、伪造照片，然后将原始记录丢进忘怀洞，彻底从这个世界上抹除。温斯顿还挺享受动脑筋解决问题的过程，但这也让他想热切了解过去那个世界。</p><p>因此他跟踪了一个老头，想从他嘴里套出点过去的事，但老头不上当，啥也没问出来。</p><p>他还着迷一些老物件，比如写日记的日记本就是去古董店淘的，后面还去淘了一块珊瑚鹅卵石，原因是这不是这个时代可能有的东西。回家路上，他碰到了小说司的那个女孩，认为她在跟踪他，然后溜回家了。趟家里胡思乱想，怕下一秒就被思想警察冲进门逮捕。</p><h2 id="第二部-·-茱莉亚正在爱着你"><a href="#第二部-·-茱莉亚正在爱着你" class="headerlink" title="第二部 · 茱莉亚正在爱着你"></a>第二部 · 茱莉亚正在爱着你</h2><p>本部分内容，温斯顿遇见了crush，就是上面提到的小说司的女孩——茱莉亚。</p><p>在之前温斯顿是怎么看待茱莉亚的呢？</p><blockquote><p>在那一天之前，他深切地憎恶她，认为她是一个少年反性同盟的狂热追随者，因为她带着此同盟的红腰带，一个禁欲和贞洁的象征。</p></blockquote><p>在第一部结尾，他们在路上偶遇，温斯顿还以为她是思想警察，来跟踪他的，他恨不得把她当场砸死。（小温你想太多啦）</p><p>反转马上来了，一天温斯顿在真理部上班，在走廊碰到了茱莉亚，擦肩而过时，茱莉亚摔倒了！但小温还是很贴心的去扶起这个他恨得要死的女人呢~没想到茱莉亚塞给他一张纸条，温斯顿在各种掩护下偷看了一眼纸条————“我爱你”。</p><p>我的天哪！画风突然变成偶像剧了！这谁顶得住？茱莉亚其实身材还挺好，长得也很标致，我们小温一下子陷入爱河了。经过了层层暗号碰头，温斯顿跟茱莉亚在一个郊外的小树林里约会了。</p><blockquote><p>他把她压倒在草地上，就在掉落的蓝铃花中间。这次没遇上困难。</p><p>如今却没有纯粹的爱，也没有纯粹的肉欲，没有一种情感是纯粹的，因为一切都混合了恐惧及仇恨。<strong>他们的拥抱就是战斗，高潮就是胜利。是向党的一击，是政治行为。</strong></p></blockquote><p><img src="/2023/12/02/1984/2023-11-29-23-24-31.png"></p><p>精彩！</p><p>为啥呢？因为在英社的统治下，<code>性交被视为一种有点让人恶心的小手术，就像灌肠</code>。英社党抑制党员的性欲，试图扼杀性本能。这里就得提到温斯顿的原配妻子，凯瑟琳。她就是被灌输了这种思想，他与温斯顿的婚姻完全就是为了党。因此房事也是为了给党生育后代，导致他们的做爱完全变成了政治任务，每星期规律的一次，并且凯瑟琳毫无感情，只是毫无前奏地、僵硬地撩起裙子。就是是在做的时候，温斯顿还是有种她在用尽全力推开他的感觉。很遗憾，在这种没有感情的性交中，他们迟迟没有孩子，也就分居了。</p><p>但现在，温斯顿遇见了茱莉亚，他们享受着做爱的权力。他们在小树林做，在废弃教堂做，在查林顿先生出租的小房子里做。（查林顿就是那个古董店老板，他们租下了他的二楼小房间用来约会）。用幽会做爱来反抗党，你们不让我们干，我们非要干！虽然这个小房间有臭味，有臭虫，有老鼠，热的要死，破得要死。</p><blockquote><p>但那好像也无关紧要。<br>不管肮脏还是干净，那房间就是天堂。<br>他们一到，便用黑市上买来的胡椒粉到处撒了一些，然后扯掉衣服汗流浃背地做爱</p></blockquote><p>这样的日子平稳、隐蔽又幸福的过来一段，他们又联系到了奥布林———一个内党人（但又对温斯顿散发着“我就是兄弟会叛军”的气场）。温斯顿赌了一把，与茱莉亚一起去跟奥布林会面了，他赌对了，奥布林就是兄弟会成员。<br>奥布林悄悄给了他们一本兄弟会的书，揭示了“战争即和平，无知即力量，自幼即奴役”的真相。</p><p>但是。。。。转折马上来了。一天他们照常在查林顿的小房间幽会，读着那本书，下一刻，思想警察破门而入，一切都暴露了。而查林顿，居然就是思想警察。本部完。</p><p>温斯顿确确实实的爱上了茱莉亚，而她也深深爱着温斯顿，做爱就是他们反抗党的战斗。在这个毫无自由的世界里，他们悄悄地享受自由的爱。</p><h2 id="第三步-·-奥布林正在拷打你"><a href="#第三步-·-奥布林正在拷打你" class="headerlink" title="第三步 · 奥布林正在拷打你"></a>第三步 · 奥布林正在拷打你</h2><p>是的，温斯顿的靠山，兄弟会的成员奥布林其实也是思想警察。温斯顿被带到了友爱部进行思想改造（就是洗脑）。奥布林通过有计划的拷打以及心理战术，一层层击破温斯顿的精神。温斯顿问过：兄弟会是否存在，得到的回答是他永远也不会知道，到底有没有兄弟会，作者也给读者留下了想象的空间，是确有其组织秘密反抗党？还是这只是党虚构出来的一个陷阱？以及奥布林是党的拥护者还是碟中谍？我们无从得知，我认为是不存在的。</p><p>温斯顿的改造有三阶段：学习、理解、接受。为什么不是直接处决？奥布林给了温斯顿回答，党不要叛徒带着恨与不甘被处决，他们要将犯人完全改造为效忠党的人，带着对老大哥的热爱再被处决。他也跟温斯顿说了，无论改造结果怎么样，温斯顿最后都会被枪毙。</p><p>学习阶段，是不断殴打、拷问温斯顿，让他交代出所有罪行，让温斯顿分不清日夜时间，一直处于恐惧中，这阶段结束时，温斯顿直接变成了一个”怪物“，浑身不成样子。<br><img src="/2023/12/02/1984/2023-12-02-22-04-50.png"></p><p>理解阶段，奥布林跟温斯顿明白“他已经烂掉了”，并跟他解释党的权力，只要党愿意，什么事情都可以做到，像什么“变成个肥皂泡飞起来”，党控制了实体，控制了思想，就是控制了一切，党有无限的权力。而人的权力也源自党，权力具有集体性。很唯心论的思想，奥布林也说了，他们就是“集体唯心论”，<code>有人的意识存在，才有事物的存在</code></p><p>接受阶段，此前温斯顿说他没有背叛茱莉亚。随后温斯顿被带到友爱部101房间，奥布林用他最害怕的老鼠，给温斯顿贴脸上，温斯顿受不了这种恐惧，大喊“去咬茱莉亚”。改造结束了，温斯顿连他最爱的茱莉亚也背叛了。</p><p>党没那么快处决温斯顿，改造完后放他出来了，他在一个公园偶遇了茱莉亚，双方互相承认背叛的对方。</p><blockquote><p>“在遮阴的栗树下，你出卖了我，我出卖了你。”</p></blockquote><p>他们说着以后再见，却又相互厌恶的走散在人群中。</p><p>不久后，温斯顿被枪毙了。</p><blockquote><p>他举头望了老大哥一眼。等了四十年，今天才晓得隐在黑胡子后面的笑容是什么意义。唉，以往对老大哥的误解多残忍、多无聊呵！温斯顿，你是个顽固、刚愎自用、一直要挣脱老大哥慈爱怀抱的浪子，他告诉自己说。两滴渗着杜松子酒气味的眼泪滚到鼻子的两边来。但现在什么事都摆平了，斗争已经结束。<strong>他已战胜了自己。他爱老大哥。</strong></p></blockquote><h2 id="一些感想"><a href="#一些感想" class="headerlink" title="一些感想"></a>一些感想</h2><p>什么是自由呢？温斯顿说<code>自由就是说二加二等于四的自由</code>，在改造时，奥布林也抓住他这句话，让他承认<code>2+2=5</code>，在获释后的咖啡厅里，温斯顿也在桌上画下<code>2+2=5</code>，他彻底失去了自我，失去了自由。</p><blockquote><p>有趣的是2+2&#x3D;5是苏共第二个五年计划的标语</p></blockquote><p>他们在相遇前，感受自由的方法，温斯顿是通过写日记，茱莉亚是通过性。他们相遇后，相爱便是他们感受自由、享受自由的途径。大洋国不让公民拥有自由意志，个人不能有自己的想法，并且限制性行为，让人民的欲望得不到满足而将不满转移到敌人身上，这样才能对老大哥和党绝对服从。</p><p>引用康德的一句：<code>自由不是你想做什么就能做什么，而是你不想做什么就可以不做什么。</code>自由是敢于说出自己的想法，敢于拒绝。</p><p>看了一些b站解读的视频，评论区有个观点我很赞同</p><blockquote><p>1984是一则寓言故事，不要试图寻找所谓的“原型”，根本没有原型，或者说，每个国家多多少少都沾点。<br>它展现了人类未来的一种可能性，以达到警示作用</p></blockquote><p>作者不是在指责某个国家，而是在警示人类社会。</p><p>想起著名的冷门电影《肖申克的救赎》（作文经典老素材）</p><blockquote><p>有些鸟儿注定是关不住的，它的每一片羽毛都闪耀着自由的光辉。</p></blockquote><p>敬人类，敬自由。</p><hr><blockquote><p>后续有想到再写写吧~</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>文学</tag>
      
      <tag>读后感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>激光雷达调研</title>
    <link href="/2023/11/21/lidar/"/>
    <url>/2023/11/21/lidar/</url>
    
    <content type="html"><![CDATA[<h1 id="激光雷达调研"><a href="#激光雷达调研" class="headerlink" title="激光雷达调研"></a>激光雷达调研</h1><p>导师最近想入手激光雷达来搞点云，让我调研一下各个型号，主要是大疆的型号，然后其他对比看看<br><img src="/2023/11/21/lidar/2023-11-21-19-43-26.png"></p><p>目前感兴趣的是Mid-70这一款</p>]]></content>
    
    
    
    <tags>
      
      <tag>激光雷达</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《Rick and Morty》 S7E4</title>
    <link href="/2023/11/12/rick-and-morty-s7e4/"/>
    <url>/2023/11/12/rick-and-morty-s7e4/</url>
    
    <content type="html"><![CDATA[<h1 id="Live-Forver"><a href="#Live-Forver" class="headerlink" title="Live Forver"></a>Live Forver</h1><p>瑞克和莫蒂第七季最近开播了，我也每周都追最新一集，说实话前两集有点无聊，第三集开始有点意思，瑞克根废柴老爸对换一半灵魂，然后俩人惺惺相惜。不过第4集属实让我觉得那个瑞克和莫蒂又回来了。</p><p>开幕的字幕就感觉这集不对劲<img src="/2023/11/12/rick-and-morty-s7e4/2023-11-12-22-29-57.png"></p><p>但一开头就是很奇怪的一家人和和睦睦地在吃意大利面，这一幕真的很难在瑞克和莫蒂中见到，每次餐桌上都是在斗嘴，就连莫蒂他爸都不惹人讨厌了。<br><img src="/2023/11/12/rick-and-morty-s7e4/2023-11-12-22-25-54.png"></p><p>下一幕果然反转，外公的意大利面是别人的尸体。。。。确切来说是自杀的人的尸体。后面剧情就是非常直接的寓意，瑞克带莫蒂去了那个自杀就会变成意大利面的星球，然后给星球的总统带来了灵感。逼迫居民自杀，然后制作意大利面外售。不用说也知道在骂一些资本家了吧。莫蒂以为自己干了好事，确实是干了好事，一家人知道真相后：<img src="/2023/11/12/rick-and-morty-s7e4/2023-11-12-22-34-18.png"></p><p>笑死哈哈哈哈哈哈哈，大家在良心和美食之间跳跃。</p><p>后续就是瑞克带莫蒂去擦屁股，为了避免自杀，外公做生物灰色实验，研究出一种量产方案（方案二外公贴心的没有做哈哈哈哈哈哈，因为他知道莫蒂无法接受创造一个从出生就活在痛苦的生物）</p><p>没想到引来两方势力的起义：反意大利面变味派、躯干命贵派<img src="/2023/11/12/rick-and-morty-s7e4/2023-11-12-22-38-26.png"></p><p>结果就是又变成一团乱。最后找到了星球上最后一个愿意自杀的人——弗莱德，想让外公复制出原生的意大利面。然后就是本季最佳片段，弗莱德坐在安乐死椅上，注射下药物，然后回忆普通而存在你我之间的一生，伴着Live Forever的插曲，回光返照此生。<img src="/2023/11/12/rick-and-morty-s7e4/2023-11-12-22-47-49.png">音乐结束，弗莱德死了，大家看完纷纷吐了。</p><p>瑞克开始跟莫蒂讲道理<img src="/2023/11/12/rick-and-morty-s7e4/2023-11-12-22-48-23.png"></p><p>“我根本就不在乎”，生命本身就是错的，我们不需要知道太多。瑞克认识到了人生的虚无，所以他不在乎那些，依旧敢吃意面。接着就是一家人的疯狂星期四从意面变成了巨好吃的牛排，也没有人想知道牛排怎么来的了。</p><p>这集有太多深刻的内容了，讽刺资本、讽刺资本的意面工厂，还有弗莱德美好而平凡的一生（也是我们每个人的一生），以及外公对人生虚无的态度。</p><p>或许我们不需要知道太多，不用什么都计较，只是好好享受，好好度过这平凡的一生。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=2096553555&auto=1&height=66"></iframe><blockquote><p>Maybe I just want to fly</p><p>也许 我只想飞离</p><p>Want to live, I don’t want to die</p><p>我只是想活下去 , 我不想死去</p><p>Maybe I just want to breathe</p><p>也许 我只是想呼吸</p><p>Maybe I just don’t believe</p><p>也许 我只是无法再次相信</p><p>Maybe you’re the same as me</p><p>也许你如我一样</p><p>We see things I’ll never see</p><p>我们看见了无法触及到的事物</p><p>You and I are gonna live forever</p><p>你和我将永远互相交织</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>读后感</tag>
      
      <tag>影视</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【BEV】BEVFusion——基于BEV表征的多任务多传感器融合</title>
    <link href="/2023/11/09/bevfusion/"/>
    <url>/2023/11/09/bevfusion/</url>
    
    <content type="html"><![CDATA[<h1 id="论文"><a href="#论文" class="headerlink" title="论文"></a>论文</h1><p>论文的题目是：*<a href="https://arxiv.org/pdf/2205.13542.pdf">《BEVFusion: Multi-Task Multi-Sensor Fusion with Unified Bird’s-Eye View Representation》</a>*</p><p>本文提出的BEVFusion是一种多任务多传感器融合框架，其统一BEV表征空间中的多模态特征，很好地保留了几何和语义信息。为实现这一点，优化BEV池化，诊断并解除视图转换中的关键效率瓶颈，将延迟减少了40倍。BEVFusion从根本上来说是任务无关的，无缝支持不同的3D感知任务，几乎没有架构的更改。</p><p>如图所示是BEVFusion流水线概览：给定不同的感知输入，首先应用特定于模态的编码器来提取其特征；将多模态特征转换为一个统一的BEV表征，其同时保留几何和语义信息；存在的视图转换效率瓶颈，可以通过预计算和间歇降低来加速BEV池化过程；然后，将基于卷积的BEV编码器应用到统一的BEV特征中，以缓解不同特征之间的局部偏准；最后，添加一些特定任务头支持不同的3D场景理解工作。<img src="/2023/11/09/bevfusion/2023-11-09-16-08-44.png"></p><p>本文的关键贡献在于，优化了BEV池化操作的效率。</p><ul><li>预计算</li><li>间歇降低<br><img src="/2023/11/09/bevfusion/2023-11-09-16-36-23.png"></li></ul><p>通过以上优化，使得摄像头到BEV的转换速度提高了40倍！</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p><a href="https://github.com/mit-han-lab/bevfusion">https://github.com/mit-han-lab/bevfusion</a></p><hr><blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://zhuanlan.zhihu.com/p/521821929">https://zhuanlan.zhihu.com/p/521821929</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>BEV</tag>
      
      <tag>复现记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【BEV】伪雷达点云—Pseudo-LiDAR</title>
    <link href="/2023/10/30/pseudo-LiDAR/"/>
    <url>/2023/10/30/pseudo-LiDAR/</url>
    
    <content type="html"><![CDATA[<h1 id="论文"><a href="#论文" class="headerlink" title="论文"></a>论文</h1><p>论文的题目是：<em>《<a href="https://arxiv.org/abs/1812.07179">Pseudo-LiDAR from Visual Depth Estimation: Bridging the Gap in 3D Object Detection for Autonomous Driving》</a></em></p><p>论文探讨了基于图像的3D感知和基于LiDAR的3D感知之间的差异，指出基于图像方法的不足，提出了Pseudo-LiDAR来从图像建立点云数据进行感知任务。</p><h3 id="Image-based-3D-Perception-劣势原因"><a href="#Image-based-3D-Perception-劣势原因" class="headerlink" title="Image-based 3D Perception 劣势原因"></a>Image-based 3D Perception 劣势原因</h3><ul><li><p>不准确的深度信息</p></li><li><p>图像2D的表示方式</p></li></ul><p>后者是造成2维卷积在基于图像的感知任务中使图像扭曲的原因。作者分析了两个主要问题：一是不同物体间应该不连贯，但2D图像中不同深度的物体均在一个平面上（不像点云那种，不同深度不连贯）；二是前后景不同尺度，2D图像远处物体由于透视原因尺度较小，检测成为一个较难的问题（雷达点云则能保持三维空间中原始的尺度）。</p><h3 id="Pseudo-LiDAR-流程"><a href="#Pseudo-LiDAR-流程" class="headerlink" title="Pseudo-LiDAR 流程"></a>Pseudo-LiDAR 流程</h3><p><img src="/2023/10/30/pseudo-LiDAR/2023-10-30-16-00-41.png"></p><p>其首先利用图像深度预测模型（如DRON、PSMNET）从单目或立体图像获取对应深度图像；然后将原图像和深度信息结合得到伪雷达点云，将像素反投影到3D坐标中，得到点云；最后用伪点云代替原始雷达点云，在基于点云的感知模型中进行感知任务（如F-PointNet、AVOD）。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p><a href="https://github.com/mileyan/pseudo_lidar">https://github.com/mileyan/pseudo_lidar</a></p><blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/weixin_41965898/article/details/119953338">https://blog.csdn.net/weixin_41965898/article/details/119953338</a><br><a href="https://zhuanlan.zhihu.com/p/52803631">https://zhuanlan.zhihu.com/p/52803631</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>BEV</tag>
      
      <tag>激光雷达</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flutter踩坑报告</title>
    <link href="/2023/10/25/draw/"/>
    <url>/2023/10/25/draw/</url>
    
    <content type="html"><![CDATA[<h1 id="Flutter-踩坑总集"><a href="#Flutter-踩坑总集" class="headerlink" title="Flutter 踩坑总集"></a>Flutter 踩坑总集</h1><h3 id="卡在assembleDebug"><a href="#卡在assembleDebug" class="headerlink" title="卡在assembleDebug"></a>卡在assembleDebug</h3><p>卡在 Running Gradle task ‘assembleDebug’… 这个步骤。而且会报网络的 Exception。</p><p>可以尝试改flutter和项目的gradle源地址到国内镜像，可能没啥用</p><p>也可以手动安装。首先在 android&#x2F;gradle&#x2F;wrapper&#x2F;gradle-wrapper.properties 可以看到本项目使用的 Gradle 版本。在 Gradle 的官网（<a href="https://gradle.org/%EF%BC%89%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%B8%8B%E8%BD%BD%E5%88%B0%E5%AE%8C%E6%95%B4%E7%9A%84%E5%8C%85%E3%80%82">https://gradle.org/）就可以下载到完整的包。</a></p><p>在 <a href="https://services.gradle.org/distributions/">https://services.gradle.org/distributions/</a> 下载对应版本的包，如 gradle-5.6.2-all.zip。</p><p>下载完成之后解压到 ～&#x2F;.gradle&#x2F;wrapper&#x2F;dists&#x2F;gradle-5.6.2-all&#x2F;xxx 下。其中 xxx 为一串如 9st6wgf78h16so49nn74lgtbb 的字符串。</p><hr><h3 id="Google-font版本太低"><a href="#Google-font版本太低" class="headerlink" title="Google font版本太低"></a>Google font版本太低</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">import &#x27;asset_manifest.dart&#x27;;</span><br><span class="hljs-section">^^^^^^^^^^^^^</span><br></code></pre></td></tr></table></figure><p>Google font版本太低<br><a href="https://dev.to/curtlycritchlow/how-to-fix-assetmanifest-is-imported-from-both-packageflutter-and-packagegooglefonts-error-28e8">https://dev.to/curtlycritchlow/how-to-fix-assetmanifest-is-imported-from-both-packageflutter-and-packagegooglefonts-error-28e8</a></p><hr><h3 id="Execution-failed-for-task-‘-app-lintVitalRelease’"><a href="#Execution-failed-for-task-‘-app-lintVitalRelease’" class="headerlink" title="Execution failed for task ‘:app:lintVitalRelease’."></a>Execution failed for task ‘:app:lintVitalRelease’.</h3><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">Flutter <span class="hljs-literal">Error</span> : Could <span class="hljs-keyword">not</span> resolve <span class="hljs-keyword">all</span> artifacts <span class="hljs-keyword">for</span> <span class="hljs-keyword">configuration</span> ‘:image_picker_android:debugUnitTestRuntimeClasspath’<br></code></pre></td></tr></table></figure><p><a href="https://flutter-developer.medium.com/solved-flutter-error-could-not-resolve-all-artifacts-for-configuration-56deea1c5d12">https://flutter-developer.medium.com/solved-flutter-error-could-not-resolve-all-artifacts-for-configuration-56deea1c5d12</a></p><p>解决方案似乎是忽略掉某些错误🤔</p><hr><h3 id="Android-12-app安装错误"><a href="#Android-12-app安装错误" class="headerlink" title="Android 12 app安装错误"></a>Android 12 app安装错误</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Targeting S+ (<span class="hljs-built_in">version</span> <span class="hljs-number">31</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">above</span>) requires <span class="hljs-keyword">that</span> an explicit value <span class="hljs-keyword">for</span> android:exported be defined when intent filters are present<br></code></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/70333565/targeting-s-version-31-and-above-requires-that-an-explicit-value-for-android">https://stackoverflow.com/questions/70333565/targeting-s-version-31-and-above-requires-that-an-explicit-value-for-android</a></p><hr><h3 id="签名与流水线CI-CD"><a href="#签名与流水线CI-CD" class="headerlink" title="签名与流水线CI&#x2F;CD"></a>签名与流水线CI&#x2F;CD</h3><p><a href="https://52smile.vip/2023/08/03/CI-CD/index.html">https://52smile.vip/2023/08/03/CI-CD/index.html</a></p><p><a href="https://coldstone.fun/post/2020/02/26/flutter-github-actions/">https://coldstone.fun/post/2020/02/26/flutter-github-actions/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>flutter</tag>
      
      <tag>bug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【BEV】BEV模型开山论文——Lift-Splat-Shoot</title>
    <link href="/2023/10/23/lss/"/>
    <url>/2023/10/23/lss/</url>
    
    <content type="html"><![CDATA[<h1 id="论文"><a href="#论文" class="headerlink" title="论文"></a>论文</h1><p>论文的题目是：<em>《<a href="https://arxiv.org/pdf/2008.05711.pdf">LSS: Lift, Splat, Shoot: Encoding Images from Arbitrary Camera Rigs by Implicitly Unprojecting》</a></em></p><p>其核心思想是通过显示估计图像的深度信息，对采集到的环视图像进行特征提取，根据估计出来的离散深度信息，实现图像特征向BEV特征的转换，进而完成自动驾驶中的语义分割任务。</p><h3 id="Lift"><a href="#Lift" class="headerlink" title="Lift"></a>Lift</h3><p>提取图像特征，然后将每个图片从二维提升到统一的三维坐标系下，得到像素点在3D空间中的特征，作者将每个像素点都生成所有可能深度，得到一组离散化的深度空间，对应一个棱台状的空间点云分布<img src="/2023/10/23/lss/2023-10-23-15-46-57.png"></p><h3 id="Splat"><a href="#Splat" class="headerlink" title="Splat"></a>Splat</h3><p>将Lift得到的点云转化成Pillars（无限高的体素），就是将点分配到离他最近的Pillars中，然后求和池化得到一个C*H*W的张量，对这个张量进行CNN可以得到鸟瞰图的预测结果<img src="/2023/10/23/lss/2023-10-23-15-54-28.png"></p><h3 id="Shoot"><a href="#Shoot" class="headerlink" title="Shoot"></a>Shoot</h3><p>对splat得到的特征进行编解码处理，可以看作是bev特征提取器，将编解码后的特征用于目标任务</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>学习链接：<a href="https://www.bilibili.com/video/BV16T411g7Gc">手撕BEV的开山之作</a></p><h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><p><a href="https://github.com/nv-tlabs/lift-splat-shoot">https://github.com/nv-tlabs/lift-splat-shoot</a></p><p>首先需要用到nuscenes数据集（<a href="https://www.nuscenes.org),下载mini的完整数据集以及map/">https://www.nuscenes.org），下载mini的完整数据集以及map</a> extension 1.3</p><p>然后下载预训练的模型： <a href="https://drive.google.com/file/d/18fy-6beTFTZx5SrYLs9Xk7cY-fGSm7kw/view?usp=sharing">https://drive.google.com/file/d/18fy-6beTFTZx5SrYLs9Xk7cY-fGSm7kw/view?usp=sharing</a></p><p>然后可以运行如下代码生成鸟瞰图：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">python main.py viz_model_preds mini --model<br>f=E:\Download\model525000.pt --dataroot=F:\Datasets\Nuscenes-mini --map_folder=F:\Datasets\Nuscenes-mini<br><br><span class="hljs-comment"># 其中--modelf为预训练模型目录，--dataroot为nuscenes数据集根目录，--map_folder为map extension根目录</span><br></code></pre></td></tr></table></figure><hr><blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/zyw2002/article/details/127906938">https://blog.csdn.net/zyw2002/article/details/127906938</a><br><a href="https://blog.csdn.net/CV_Autobot/article/details/128213478">https://blog.csdn.net/CV_Autobot/article/details/128213478</a><br><a href="https://blog.csdn.net/weixin_41803339/article/details/127140039">https://blog.csdn.net/weixin_41803339/article/details/127140039</a><br><a href="https://blog.csdn.net/weixin_42108183/article/details/128524399?spm=1001.2014.3001.5501">https://blog.csdn.net/weixin_42108183/article/details/128524399?spm=1001.2014.3001.5501</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>BEV</tag>
      
      <tag>复现记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenPCDet复现</title>
    <link href="/2023/10/16/pcdet/"/>
    <url>/2023/10/16/pcdet/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p><a href="https://www.cnblogs.com/mrneojeep/p/17390375.html">https://www.cnblogs.com/mrneojeep/p/17390375.html</a></p><p><a href="https://blog.csdn.net/qq_45228845/article/details/125583891">https://blog.csdn.net/qq_45228845/article/details/125583891</a></p><h1 id="问题集合"><a href="#问题集合" class="headerlink" title="问题集合"></a>问题集合</h1><ol><li><p>kornia问题<br><img src="/2023/10/16/pcdet/2023-10-16-19-58-11.png"></p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">ModuleNotFoundError: No <span class="hljs-keyword">module</span> <span class="hljs-keyword">named</span> ‘kornia‘<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">Cannot statically infer the expected size of a list in <span class="hljs-keyword">this</span> context<br></code></pre></td></tr></table></figure><blockquote><p>解决方案：安装正确版本的kornia<br><a href="https://blog.csdn.net/weixin_52288941/article/details/133518555">https://blog.csdn.net/weixin_52288941/article/details/133518555</a></p></blockquote></li><li><p>demo跑通了但是：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">GLFW Error: X11: The <span class="hljs-keyword">DISPLAY</span> environment <span class="hljs-keyword">variable</span> is <span class="hljs-comment">missing</span><br></code></pre></td></tr></table></figure><p>ssh远程没有Xserver客户端，显示不了可视化工具</p><blockquote><p>解决方案：配置本地可视化<br><a href="https://blog.csdn.net/m0_50181189/article/details/120958568">https://blog.csdn.net/m0_50181189/article/details/120958568</a></p></blockquote></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>复现记录</tag>
      
      <tag>激光雷达</tag>
      
      <tag>目标检测</tag>
      
      <tag>点云</tag>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建站小记</title>
    <link href="/2023/10/13/first-post/"/>
    <url>/2023/10/13/first-post/</url>
    
    <content type="html"><![CDATA[<p>记录本博客搭建过程。</p><p>为了以后更好的记录学习过程、问题解决以及一些随笔，特建立个人博客，开始养成写博客的习惯。</p><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li><p>Node.js</p></li><li><p>Git</p></li></ul><blockquote><p>安装过程不再细讲，主要吐槽一下用宝塔面板安装node.js时各种问题：npm版本过高、命令行命令无效等。<br>所以没有必要在服务器上装，本地电脑安装后，后面有部署到GitHub Page的步骤。</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>环境安装完，直接用npm安装Hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install -g hexo-cli<br>$ hexo init ***.github.io  <span class="hljs-comment"># 这里替换成你自己的，为后续更新到github上，使用github名字.github.io</span><br>$ <span class="hljs-built_in">cd</span> ***.github.io  <span class="hljs-comment"># 进入本地的博客文件夹</span><br>$ npm install<br>$ hexo server <span class="hljs-comment"># 打开本地服务器预览</span><br></code></pre></td></tr></table></figure><p>接着安装fluid主题，官网：<a href="https://hexo.io/themes/">Fluid</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>或者选择直接去GitHub下载<a href="https://github.com/fluid-dev/hexo-theme-fluid/releases/tag/v1.9.5">release源码</a>，解压到hexo项目的themes目录下，重命名为fluid</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>修改博客目录中_config.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>  <span class="hljs-comment"># 指定中文</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <span class="hljs-comment"># 指定主题</span><br></code></pre></td></tr></table></figure><p>更多配置可以参考Hexo官方文档：<a href="https://hexo.io/zh-cn/docs/configuration">Hexo 配置</a>，以及Fluid官方文档：<a href="https://hexo.fluid-dev.com/docs/guide/">Fluid 配置指南</a>。Hexo配置是博客主目录下的_config.yml，Fluid配置是themes&#x2F;fluid目录下的_config.yml</p><h2 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h2><p>执行如下命令，可以在本地生成静态页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean  <span class="hljs-comment"># 清空一下缓存，有时候博客页面显示不正常也可以试试这个命令行</span><br>$ hexo g  <span class="hljs-comment"># hexo generate的简写，把刚刚做的改动生成更新一下</span><br>$ hexo server  <span class="hljs-comment"># 在本地服务器看看博客：https://localhost:4000</span><br></code></pre></td></tr></table></figure><p>到此你已经可以在本地看到你的博客小站啦~</p><h1 id="部署Github-Page"><a href="#部署Github-Page" class="headerlink" title="部署Github Page"></a>部署Github Page</h1><p>Github Page是提供静态网站访问服务的，就是将静态网站项目传到GitHub上，他能为你提供一个url入口（如rlin1538.github.io），直接访问你的静态网站，而Hexo编译生成的就是一个静态网站。</p><p>首先我们得把生成的静态网站上传到GitHub中，GitHub中得有一个对应的仓库。所以第一步是创建一个名为<code>GitHub用户名.github.io</code>的代码仓库<img src="/2023/10/13/first-post/001.png"></p><p>然后修改博客配置_config.yml，改成你的信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:xxxx/xxxx.github.io.git</span> <span class="hljs-comment"># xxxx是你的GitHub用户名</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>然后生成站点文件并推送到远程仓库即可，推送时需要填GitHub账户和密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean  <span class="hljs-comment"># 保险起见，每次我们都清空一下</span><br>hexo deploy --generate<br></code></pre></td></tr></table></figure><p>推送完成后，打开你的Github Page即可看到小站啦！（可能会有一分钟左右的延迟）</p><p>参考：<a href="https://hexo.io/zh-cn/docs/one-command-deployment">部署|Hexo</a></p><h1 id="创作"><a href="#创作" class="headerlink" title="创作"></a>创作</h1><p>要开始写博客，可以通过在博客目录执行如下命令创建一篇新文章：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>hexo会在source&#x2F;_posts目录下创建一个test.md文件，我们在这里使用markdown语法写博客即可</p><p>或者你可以直接在source&#x2F;_posts目录创建md文件。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">test</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-04-22 21:17:39</span><br><span class="hljs-attr">tags:</span> <span class="hljs-string">hexo</span><br><span class="hljs-attr">categories:</span> <span class="hljs-string">教程</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-comment"># 一级标题</span><br><br><span class="hljs-comment">## 二级标题</span><br><br><span class="hljs-string">这里开始我们的写作吧</span><br></code></pre></td></tr></table></figure><p>上面文件最上方以—分隔的区域，用于指定文章属性（<a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter | Hexo</a>），常用的属性就是title, date, tag, categories，分别指定文章标题、建立日期、标签和分类。其中标题和建立日期都是自动生成的，我们不用管。tag和categories一般是由我们自己设置的</p><h1 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h1><p>我们可以自己买个域名，然后把GitHub Page绑定到自己的域名下。<br>我用的域名商是<a href="https://www.namesilo.com/">NameSilo</a>，十几块就能买到一个一年的域名，你也可以选择其他，比如国内的<a href="https://wanwang.aliyun.com/">阿里万网</a></p><p>首先需要在博客项目source目录中创建一个CNAME文件，填入你的域名：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">nuaa.life<br></code></pre></td></tr></table></figure><p>接着我们进入域名服务商控制台，配置域名解析：<img src="/2023/10/13/first-post/2023-10-14-13-27-21.png"><br>目标填你的GitHub Page地址，然后在GitHub博客项目中点Settings，选择Pages，填写Custom domain为你的域名，然后你就可以通过你的个人域名访问博客小站啦</p><blockquote><p>国内的域名商一般自带的控制台服务挺好用，DNS配置方便<br>国外的可以用<a href="https://cloudflare.com/">Cloudflare</a>来配置域名解析，如何使用网上已有很多教程。</p></blockquote><p>参考文章：<a href="https://juejin.cn/post/7090201115005812767">https://juejin.cn/post/7090201115005812767</a></p><h1 id="自动部署"><a href="#自动部署" class="headerlink" title="自动部署"></a>自动部署</h1><p>到此为止，我们需要在本地去编译网站静态文件，然后上传。</p><p>为方便博客撰写以及源码备份，我们可以采用Github Action自动部署，即将本地hexo源码上传到GitHub（不是上文提到的编译后的静态网站文件），利用GitHub提供的Actions，自动流转流水线编译出静态网站文件传到rlin1538.github.io仓库中。</p><p>这样，我们只需在本地写md，然后用git提交push到GitHub中即可，十分的方便！</p><p>本站参考了这篇文章完成自动部署，友友可以参考：<a href="https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/">利用Github Actions自动部署Hexo博客</a></p><h1 id="博客拓展"><a href="#博客拓展" class="headerlink" title="博客拓展"></a>博客拓展</h1><h2 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h2><p>参考：<a href="https://www.jianshu.com/p/785d727810b3">https://www.jianshu.com/p/785d727810b3</a></p><p>或者：<a href="https://www.zywvvd.com/notes/hexo/theme/fluid/fluid-waline/fluid-waline/">https://www.zywvvd.com/notes/hexo/theme/fluid/fluid-waline/fluid-waline/</a></p><hr><blockquote><h1 id="开始享受你的博客之旅吧"><a href="#开始享受你的博客之旅吧" class="headerlink" title="开始享受你的博客之旅吧~~~"></a>开始享受你的博客之旅吧~~~</h1></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>技术总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/10/13/hello-world/"/>
    <url>/2023/10/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
